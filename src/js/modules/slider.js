/*  Сейчас мы больше не будем импортировать фцию как раньше, а будем работать с классами как это появилось в 
стандарте ес6.
    По факту классы - это хорошо обернутые функции констукторы который позволяют создавать нам объекты.
    ООП - это когда мы реальный вещи описываем как какеито объекты, например тот же слайдер : у него есть кство слайдеров, у него есть
контейнер в котором будут эти сдайды перемищатся и тд, и все это просто как задавание свойст для объекта и наш слайдер умеет что-то
делать и это будет как обычные методы объекта 
    Классы всегда с большой*/

export default class Slider {
    /* в констуктор мы должны поместить те свойства которые будут характеризовать наш слайдер на начальном этапе(те до того как он начнет
работать) */
    /*так как наш слайдер будет работать на двух страницах мне нужно сказать слайдеру на какой страницу он будет работать + нужно сказать
какие слайды будут внутри. Для этого открывает блок page и там внутри лежат те дивы слайдов которые нам понадобятся. Так же понадобятся
триггеры для переключения слайдера */
    constructor(page, btns) { /*эти параметры мы будем передавать во внутрь класса(фции)
 page - у кажлого слайдера своя Страница
btns - селекторы кнопок для переключения слайдера */

        this.page = document.querySelector(page);//через this создаем новое свойство которые будет в экземпляре класса
// в конце ставим не запятую а ; потому что мы в объекте
        this.slides = this.page.children; /*те слайды которые будут внутри слайдера который нам необходимо будет перемещать
обращаемся к свойству this.page так как оно уже созданно и получаем из него всех детей которые находятся на этой странице.
ТЕ: у нас есть сейчас див с классом page - это главный блок на странице и мы его передаем в качестве page и внутри него каждый отдельный
div(блок) - каждый отдельный слайд, который будет во всем этом слайдере */

        this.btns = document.querySelectorAll(btns);/* all потому что в первом слайдере только одна стрелка, а во втором будет две */
        
        this.slideIndex = 1; //определяет текущи слайд
    }

    showSlides(n) { // n отвечает за то куда двигается наш слайдер
        if (n > this.slides.length) { 
            this.slideIndex = 1; //то вернем слайдер в самое начало
        }

        if (n < 1) {
            this.slideIndex = this.slides.length; //будет равен последнему элементу
        }

        /* Когда пользователь только зашел на страницу то нужно скрыть все слайдеры со страницы и увидел только 1 */
        this.slides.forEach(slide => {
            slide.style.display = "none";
        });

        /* теперь показываем тот который нас интересует*/
        this.slides[ this.slideIndex - 1].style.display = "block"; /*потому что нумерация в массивах с 0. Если в проекте не блочный элемент
а флекс то нужно поменять */
    }

    /* На второй страницу будет не только одна кнопка которая будет добавлять слайды, а так же отнимать */
    plusSlides(n) {
        this.showSlides(this.slideIndex += n); /* делается для того что бы более элегантно обернуть фцию showSlides и контролировать
передвижение наших слайдов */
    }

    /* Теперь создадим какой-то метод который будет иметь наш слайдер */
    render() { //что-то рендорится на страницу
/* на этом этапе если мы зайдем в консоль то мы получим div с классом page и всю html коллекцию которая будет лежать
внутри, те каждый наш слайдер с уникальным классом 
        console.log(this.page, this.slides);
 */
        this.btns.forEach(item => { 
            item.addEventListener('click', () => { //стрелки переключение слайдеров , навешиваем на них правильное переключение
                this.plusSlides(1);/* и так как у нас сейчас на слайдера только одна стрелочк которая перемещает вправо, то передаем 1 */
            });

        /* Теперь нужно при клике на логотип - переключалось на самый первый слайд 
    Алогритм действий : когда мы кликаем на элемент(логотив), то мы устанавливаем в slideIndex единичку, потому что мы должны
перевирнуться к 1ому слайду и вызвать функцию showSlides только с 1чкой
    Эта иконка - это ссылка(внутри svg картинка) и всё это внутри дива sidecontrol и там есть ссылка с классом next. Нам нужно выйти
на один уровень выше к родителю что бы получить этот див сайдконтрол и так как мы должны обратиться к ссылке, которая находится собственно
его немного выше по иерархии, то мы можем обратиться к предыдущему элементу(сиблингу)*/
            item.parentNode.previousElementSibling.addEventListener("click", (e) => {
                e.preventDefault();// потому что это ссылка
                this.slideIndex = 1; //потому нам нужно к первому
                this.showSlides(this.showSlides); //и вызываем повторно инициализацию 
            });
        });

        this.showSlides(this.slideIndex); /* эту фцию мы вызываем что бы произвилась первичная инициализация нашего слайда, что бы 
скрыть все не нужные слайды и показать один.
    Второй момент что мы постоянно ссылаемся на контекст вызова this, главное правило при работе с классами когда мы работает с контекстом-
Здесь мы обращаемся к this и это подрузумивает что мы обращаемся к свойству или методы который существует внутри ЭКЗЕМПЛЯРА КЛАССА
ведь когда мы создаем новый объект const slider, у каждого объекта сколько бы мы их не создали будут свои методы и свойства, даже различными
И сейчас когда мы обращаемся  this.showSlides, мы обращаемся к методу showSlides, который находится в этом объекте
    То же происходит с this.slideIndex, ведь у нас на странице будет несколько слайдеров, самый большой, снизу и у каждого из них
будет свой slideIndex и они НЕ БУДУТ между собой перекрещиваться*/
        /* Теперь при клике вниз идет переключение слайдов */

        
    }
}